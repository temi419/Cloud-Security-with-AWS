<img src="https://cdn.prod.website-files.com/677c400686e724409a5a7409/6790ad949cf622dc8dcd9fe4_nextwork-logo-leather.svg" alt="NextWork" width="300" />

# Cloud Security with AWS IAM

**Project Link:** [View Project](http://learn.nextwork.org/projects/aws-security-iam)

**Author:** David Adeleye  
**Email:** dadeleye088@gmail.com

---

![Image](http://learn.nextwork.org/eager_green_serene_nutmeg/uploads/aws-security-iam_1c864649)

---

## Introducing Today's Project!

In this project, I will demonstrate how AWS can be used to give an intern limited access to the dev teams systen. I'm doing this project to learn the basics of AWS and get comfortable with it 

### Tools and concepts

he services I used were very helpful in learning the fundamentals of AWS, its structure, and core functionalities. I gained a solid understanding of how IAM and EC2 operate, particularly in relation to JSON policies, user and user group management, and launching and managing instances.
### Project reflection

This project took me approximately 3 hours to complete. The most challenging part was troubleshooting an issue where the StopInstance function kept returning an "Access Denied" error for the intern. The most rewarding part was finally identifying the root cause — a misconfiguration within the policy code — and resolving it successfully. It was a great learning experience in understanding IAM permissions more deeply.

---

## Tags

 In AWS, tags are essentially labels that you attach to resources (such as EC2 instances, S3 buckets, IAM users, etc.) to help with organization, automation, and access control.

For my EC2 instances, I used a tag with the key Env and assigned it the value development. This helps clearly identify the purpose of the instances and makes it easier to manage them in a larger environment.









![Image](http://learn.nextwork.org/eager_green_serene_nutmeg/uploads/aws-security-iam_2e0e5a5d)

---

## IAM Policies

IAM (Identity and Access Management) Policies in AWS are used to define who has permission to perform what actions on which resources. They are essential for managing access control and maintaining security within your AWS environment.

### The policy I set up

I created the IAM policy using JSON, which gave me precise control over permissions, conditions, and tagging. This approach allowed me to set specific rules, such as only permitting actions on EC2 instances that have a tag with Env=development.

The policy is designed to allow all EC2 actions, but only on instances tagged with Env=development. Additionally, it grants read-only access to all EC2 resources by including permissions under ec2:Describe*.

### When creating a JSON policy, you have to define its Effect, Action and Resource.
Effect specifies whether the action is allowed or denied.

Action defines the specific operation being requested, such as starting or stopping an EC2 instance (e.g., ec2:StartInstances).

Resource identifies the specific AWS resource the action applies to, such as a particular EC2 instance or S3 bucket.










---

## My JSON Policy

![Image](http://learn.nextwork.org/eager_green_serene_nutmeg/uploads/aws-security-iam_1c864649)

---

## Account Alias

An account alias is a friendly name for your account login

Creating an account alias took me 30 seconds Now, my new AWS console sign-in URL is nextwork-temi

![Image](http://learn.nextwork.org/eager_green_serene_nutmeg/uploads/aws-security-iam_0eb4439b)

---

## IAM Users and User Groups

### Users

An IAM user is a single identity created in your AWS account that represents a real person (like you) or an application/service that needs to interact with AWS.

### User Groups

An IAM User Group is just a container for users, that lets you assign permissions in bulk.

I attached the policy I created to this user group, which means attaching a policy to a user group gives all users in that group the permissions in the policy.

---

## Logging in as an IAM User

The first way is email credentials second is CSV file 

Once I logged in as my IAM user, I noticed access was denied This was because of the policies

![Image](http://learn.nextwork.org/eager_green_serene_nutmeg/uploads/aws-security-iam_6f2ab446)

---

## Testing IAM Policies

 I tested my JSON IAM policy by opening an incognito browser window, logging into the intern’s account, and attempting various actions to ensure the permissions were correctly applied. This allowed me to validate that the intern could only perform the intended functions, such as managing EC2 instances tagged with Env=development and accessing read-only EC2 data.
### Stopping the production instance

When I attempted to stop the production instance, the action was denied due to the IAM policies in place. The policy was intentionally configured to restrict actions to only EC2 instances tagged with Env=development, which the production instance did not have.

![Image](http://learn.nextwork.org/eager_green_serene_nutmeg/uploads/aws-security-iam_0e7a9d6a)

---

## Testing IAM Policies

### Stopping the development instance

Next, when I attempted to stop the development instance, the action was successful. This confirmed that the policy granted the necessary permissions for instances tagged with Env=development. While it worked as intended, it also highlighted how much control such permissions give — reinforcing the importance of setting clear, scoped access in IAM policies.

![Image](http://learn.nextwork.org/eager_green_serene_nutmeg/uploads/aws-security-iam_1811801c)

---

## The IAM Policy Simulator

### How I used the simulator

---

---
